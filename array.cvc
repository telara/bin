export void printIntVec(int[n] vec)
{
    for (int i = 0, n)
    {
        printInt(vec[i]);
        printNewlines(1);
    }
}

export void printFloatVec(float[n] vec)
{
    for (int i = 0, n)
    {
        printFloat(vec[i]);
        printNewlines(1);
    }
}

export void printIntMat(int[m, n] mat)
{
    for (int i = 0, m)
    {
        for (int j = 0, n)
        {
            printInt(mat[i, j]);
            printSpaces(4);
        }
        printNewlines(1);
    }
}

export void printFloatMat(float[m, n] mat)
{
    for (int i = 0, m)
    {
        for (int j = 0, n)
        {
            printFloat(mat[i, j]);
            printSpaces(4);
        }
        printNewlines(1);
    }
}

export void scanIntVec(int[n] vec)
{
    int[n] scannedIntVec;
    for (int i = 0, n)
        scannedIntVec[i] = scanInt();
    printIntVec(scannedIntVec);
}

export void scanFloatVec(float[n] vec)
{
    float[n] scannedFloatVec;
    for (int i = 0, n)
        scannedFloatVec[i] = scanFloat();
    printFloatVec(scannedFloatVec);
}

export void scanIntMat(int[m, n] mat)
{
    int[m, n] scannedIntMat;
    for (int i = 0, m)
    {
        for (int j = 0, n)
        {
            scannedIntMat[i, j] = scanInt();
        }
    }
    printIntMat(scannedIntMat);
}

export void scanFloatMat(float[m, n] mat)
{
    float[m, n] scannedFloatMat;
    for (int i = 0, m)
    {
        for (int j = 0, n)
        {
            scannedFloatMat[i, j] = scanFloat();
        }
    }
    printFloatMat(scannedFloatMat);
}

/* multiply two floating point matrices a and b and store result in c 
*/
export float matMul(float[m, n] a, float[o, p] b, float[q, l] c)
{
    for (int i = 0, m)
    {
        for (int j = 0, n)
        {
            c[i, j] = a[i, j] * b[i, j];
        }
    }
    printFloatMat(c);
    return 0.0;
}
